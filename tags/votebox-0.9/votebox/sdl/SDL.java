/**
  * This file is part of VoteBox.
  * 
  * VoteBox is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 3 as published by
  * the Free Software Foundation.
  * 
  * You should have received a copy of the GNU General Public License
  * along with VoteBox, found in the root of any distribution or
  * repository containing all or part of VoteBox.
  * 
  * THIS SOFTWARE IS PROVIDED BY WILLIAM MARSH RICE UNIVERSITY, HOUSTON,
  * TX AND IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS, IMPLIED OR
  * STATUTORY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, WARRANTIES OF
  * ACCURACY, COMPLETENESS, AND NONINFRINGEMENT.  THE SOFTWARE USER SHALL
  * INDEMNIFY, DEFEND AND HOLD HARMLESS RICE UNIVERSITY AND ITS FACULTY,
  * STAFF AND STUDENTS FROM ANY AND ALL CLAIMS, ACTIONS, DAMAGES, LOSSES,
  * LIABILITIES, COSTS AND EXPENSES, INCLUDING ATTORNEYS' FEES AND COURT
  * COSTS, DIRECTLY OR INDIRECTLY ARISING OUR OF OR IN CONNECTION WITH
  * ACCESS OR USE OF THE SOFTWARE.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package votebox.sdl;

public class SDL implements SDLConstants {
  public static int vbSDL_Init(int flags) {
    return SDLJNI.vbSDL_Init(flags);
  }

  public static void vbSDL_Quit() {
    SDLJNI.vbSDL_Quit();
  }

  public static SWIGTYPE_p_SDL_Surface vbSDL_SetVideoMode(int width, int height, int bitsperpixel, int flags) {
    long cPtr = SDLJNI.vbSDL_SetVideoMode(width, height, bitsperpixel, flags);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SDL_Surface(cPtr, false);
  }

  public static SWIGTYPE_p_SDL_Surface vbSDL_LoadBMP(String file_name) {
    long cPtr = SDLJNI.vbSDL_LoadBMP(file_name);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SDL_Surface(cPtr, false);
  }

  public static int vbSDL_SetColors(SWIGTYPE_p_SDL_Surface surface, SWIGTYPE_p_SDL_Color colors, int firstcolor, int ncolors) {
    return SDLJNI.vbSDL_SetColors(SWIGTYPE_p_SDL_Surface.getCPtr(surface), SWIGTYPE_p_SDL_Color.getCPtr(colors), firstcolor, ncolors);
  }

  public static int vbSDL_BlitSurface(SWIGTYPE_p_SDL_Surface src, SWIGTYPE_p_SDL_Rect srcrect, SWIGTYPE_p_SDL_Surface dst, SWIGTYPE_p_SDL_Rect dstrect) {
    return SDLJNI.vbSDL_BlitSurface(SWIGTYPE_p_SDL_Surface.getCPtr(src), SWIGTYPE_p_SDL_Rect.getCPtr(srcrect), SWIGTYPE_p_SDL_Surface.getCPtr(dst), SWIGTYPE_p_SDL_Rect.getCPtr(dstrect));
  }

  public static void vbSDL_UpdateRect(SWIGTYPE_p_SDL_Surface screen, int x, int y, int w, int h) {
    SDLJNI.vbSDL_UpdateRect(SWIGTYPE_p_SDL_Surface.getCPtr(screen), x, y, w, h);
  }

  public static void vbSDL_FreeSurface(SWIGTYPE_p_SDL_Surface surface) {
    SDLJNI.vbSDL_FreeSurface(SWIGTYPE_p_SDL_Surface.getCPtr(surface));
  }

  public static int vbSDL_WaitEvent(SWIGTYPE_p_SDL_Event event) {
    return SDLJNI.vbSDL_WaitEvent(SWIGTYPE_p_SDL_Event.getCPtr(event));
  }

  public static void vbSDL_SetClipRect(SWIGTYPE_p_SDL_Surface surface, SWIGTYPE_p_SDL_Rect rect) {
    SDLJNI.vbSDL_SetClipRect(SWIGTYPE_p_SDL_Surface.getCPtr(surface), SWIGTYPE_p_SDL_Rect.getCPtr(rect));
  }

  public static int vbSDL_FillRect(SWIGTYPE_p_SDL_Surface dst, SWIGTYPE_p_SDL_Rect dstrect, int color) {
    return SDLJNI.vbSDL_FillRect(SWIGTYPE_p_SDL_Surface.getCPtr(dst), SWIGTYPE_p_SDL_Rect.getCPtr(dstrect), color);
  }

  public static void vbSDL_GetClipRect(SWIGTYPE_p_SDL_Surface surface, SWIGTYPE_p_SDL_Rect rect) {
    SDLJNI.vbSDL_GetClipRect(SWIGTYPE_p_SDL_Surface.getCPtr(surface), SWIGTYPE_p_SDL_Rect.getCPtr(rect));
  }

  public static SWIGTYPE_p_SDL_Surface vbSDL_ConvertSurface(SWIGTYPE_p_SDL_Surface src, SWIGTYPE_p_SDL_PixelFormat fmt, int flags) {
    long cPtr = SDLJNI.vbSDL_ConvertSurface(SWIGTYPE_p_SDL_Surface.getCPtr(src), SWIGTYPE_p_SDL_PixelFormat.getCPtr(fmt), flags);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SDL_Surface(cPtr, false);
  }

  public static int Enabled_Elo_Touchscreen(String device_path) {
    return SDLJNI.Enabled_Elo_Touchscreen(device_path);
  }

  public static int Event_Get_Type(SWIGTYPE_p_SDL_Event event) {
    return SDLJNI.Event_Get_Type(SWIGTYPE_p_SDL_Event.getCPtr(event));
  }

  public static int Event_Get_Mouse_X(SWIGTYPE_p_SDL_Event event) {
    return SDLJNI.Event_Get_Mouse_X(SWIGTYPE_p_SDL_Event.getCPtr(event));
  }

  public static int Event_Get_Mouse_Y(SWIGTYPE_p_SDL_Event event) {
    return SDLJNI.Event_Get_Mouse_Y(SWIGTYPE_p_SDL_Event.getCPtr(event));
  }

  public static int Event_Get_Mouse_Button(SWIGTYPE_p_SDL_Event event) {
    return SDLJNI.Event_Get_Mouse_Button(SWIGTYPE_p_SDL_Event.getCPtr(event));
  }

  public static int Event_Get_Key(SWIGTYPE_p_SDL_Event event) {
    return SDLJNI.Event_Get_Key(SWIGTYPE_p_SDL_Event.getCPtr(event));
  }

  public static void Rect_Set(SWIGTYPE_p_SDL_Rect rect, int x, int y, int w, int h) {
    SDLJNI.Rect_Set(SWIGTYPE_p_SDL_Rect.getCPtr(rect), x, y, w, h);
  }

  public static int Rect_Get_X(SWIGTYPE_p_SDL_Rect rect) {
    return SDLJNI.Rect_Get_X(SWIGTYPE_p_SDL_Rect.getCPtr(rect));
  }

  public static int Rect_Get_Y(SWIGTYPE_p_SDL_Rect rect) {
    return SDLJNI.Rect_Get_Y(SWIGTYPE_p_SDL_Rect.getCPtr(rect));
  }

  public static int Rect_Get_Width(SWIGTYPE_p_SDL_Rect rect) {
    return SDLJNI.Rect_Get_Width(SWIGTYPE_p_SDL_Rect.getCPtr(rect));
  }

  public static int Rect_Get_Height(SWIGTYPE_p_SDL_Rect rect) {
    return SDLJNI.Rect_Get_Height(SWIGTYPE_p_SDL_Rect.getCPtr(rect));
  }

  public static int Surface_Set_Pixel(int x, int y, SWIGTYPE_p_SDL_Surface surface, int a, int r, int g, int b) {
    return SDLJNI.Surface_Set_Pixel(x, y, SWIGTYPE_p_SDL_Surface.getCPtr(surface), a, r, g, b);
  }

  public static int Surface_Get_Pixel_R(int x, int y, SWIGTYPE_p_SDL_Surface surface) {
    return SDLJNI.Surface_Get_Pixel_R(x, y, SWIGTYPE_p_SDL_Surface.getCPtr(surface));
  }

  public static int Surface_Get_Pixel_G(int x, int y, SWIGTYPE_p_SDL_Surface surface) {
    return SDLJNI.Surface_Get_Pixel_G(x, y, SWIGTYPE_p_SDL_Surface.getCPtr(surface));
  }

  public static int Surface_Get_Pixel_B(int x, int y, SWIGTYPE_p_SDL_Surface surface) {
    return SDLJNI.Surface_Get_Pixel_B(x, y, SWIGTYPE_p_SDL_Surface.getCPtr(surface));
  }

  public static int Surface_Get_Pixel_A(int x, int y, SWIGTYPE_p_SDL_Surface surface) {
    return SDLJNI.Surface_Get_Pixel_A(x, y, SWIGTYPE_p_SDL_Surface.getCPtr(surface));
  }

  public static SWIGTYPE_p_SDL_PixelFormat Surface_Get_Format(SWIGTYPE_p_SDL_Surface surface) {
    long cPtr = SDLJNI.Surface_Get_Format(SWIGTYPE_p_SDL_Surface.getCPtr(surface));
    return (cPtr == 0) ? null : new SWIGTYPE_p_SDL_PixelFormat(cPtr, false);
  }

  public static SWIGTYPE_p_SDL_Surface Alloc_Surface(int width, int height) {
    long cPtr = SDLJNI.Alloc_Surface(width, height);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SDL_Surface(cPtr, false);
  }

  public static SWIGTYPE_p_SDL_Event Alloc_Event() {
    long cPtr = SDLJNI.Alloc_Event();
    return (cPtr == 0) ? null : new SWIGTYPE_p_SDL_Event(cPtr, false);
  }

  public static void Free_Event(SWIGTYPE_p_SDL_Event arg0) {
    SDLJNI.Free_Event(SWIGTYPE_p_SDL_Event.getCPtr(arg0));
  }

  public static SWIGTYPE_p_SDL_Rect Alloc_Rect() {
    long cPtr = SDLJNI.Alloc_Rect();
    return (cPtr == 0) ? null : new SWIGTYPE_p_SDL_Rect(cPtr, false);
  }

  public static void Free_Rect(SWIGTYPE_p_SDL_Rect arg0) {
    SDLJNI.Free_Rect(SWIGTYPE_p_SDL_Rect.getCPtr(arg0));
  }

}
