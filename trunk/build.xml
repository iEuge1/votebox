<?xml version="1.0"?>

<!-- hand-crafted by dsandler -->
<!-- hand-modified by Montrose -->

<project name="votebox" default="jar-evil">
	<description>votebox: previously ballotbox360</description>

	<taskdef name="preprocess"
			 classname="ant.PreProcessorTask"
			 classpath="ant/jpp.jar" />
	<typedef name="define"
			 classname="ant.Define"
			 classpath="ant/jpp.jar" />
	<taskdef name="jstub"
			 classname="com.orangevolt.tools.ant.JStubTask"
			 classpath="ant/orangevolt-ant-tasks-1.3.8.jar" />
	<taskdef name="jarbundler"
			 classname="net.sourceforge.jarbundler.JarBundler"
			 classpath="ant/jarbundler-2.0.0.jar" />
	
	<!--
	<taskdef name="doxygen" classname="org.doxygen.tools.DoxygenTask"/>
	<taskdef classpath="orangevolt-ant-tasks-1.3.8.jar" resource="com/orangevolt/tools/ant/taskdefs.properties"/>
	<taskdef name="license" classname="ant.LicenseTask"/>
	-->
	
	<property name="src" 		location="." />

	<!-- tests seem to be sprinkled all over -->
	<property name="src.tests" 	location="./**" />
	<property name="build" 		location="build" />
	<property name="tmp"        location="tmp" />
	<property name="lib"		location="lib"/>
	<property name="ant"        location="ant"/>
	<property name="release"    location="release"/>
	<property name="publish"    location="."/>

	<!-- now! -->
	<tstamp/>
	
	<path id="project.classpath">
		<pathelement path="${classpath}" />
		<pathelement path="${build}" />
		<fileset dir="${lib}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<!-- get started -->
	<target name="init">
		<mkdir dir="${build}" />
		<mkdir dir="${tmp}" />

		<!-- write this into a build.properties file -->
		<delete file="${build}/build.properties" />
		<propertyfile file="${build}/build.properties">
			<entry key="svn.revision" value="${svnrev}" />
			<entry key="build.date" type="date" value="now" 
				   pattern="yyyyMMdd HH:mm:ss"/>
			<entry key="build.user" value="${user.name}"/>
			<entry key="build.jvm" value="${java.vm.version}"/>
		</propertyfile>
	</target>

    <target name="clean">
    	<delete dir="${tmp}" />
		<delete dir="${build}" />
	</target>

	<target name="preprocess-evil" depends="init" description="process the sources, leave in the evil">
		<preprocess rootdirectory="${src}" destdirectory="${tmp}" debug="no" >
			<define name="EVIL"/>
		</preprocess>
	</target>
	
	<target name="preprocess-good" depends="init" description="process the sources, omit in the evil">
		<preprocess rootdirectory="${src}" destdirectory="${tmp}" debug="no" />
	</target>
	
	<target name="compile-evil" depends="preprocess-evil" description="compile the sources, with evil">
		<javac 
			srcdir="${tmp}"
			destdir="${build}"
			classpathref="project.classpath"
			debuglevel="lines,vars,source"
			debug="true"
			>
		</javac>
	</target>
	
	<target name="compile-good" depends="preprocess-good" description="compile the sources, without evil">
		<javac 
			srcdir="${tmp}"
			destdir="${build}"
			classpathref="project.classpath"
			debuglevel="lines,vars,source"
			debug="true"
			>
		</javac>
	</target>

	<target name="jar-evil" depends="compile-evil"
                                description="build the jars, including evil source">
 
                <delete file="${build}/votebox.jar"/> <!-- avoid corruption on NFS -->
                <jar
                        jarfile="${build}/votebox.jar"
                        basedir="."
                        manifest="ant/votebox.mf">
                        <fileset dir="${build}">
                                <include name="**/*.class"/>
                        </fileset>
			<fileset dir="${src}" includes="keys/">
				<exclude name="**/private.key"/>
			</fileset>
			<fileset dir="${src}" includes="images/" />
                        <!-- schema files -->
                        <include name="votebox/middle/schema/**" />
                        <!-- include name="rsrc/*.ico"/ -->
                        <!-- include name="rsrc/*.css"/ -->
                        <include name="build.properties"/>
                </jar>
                <delete file="${build}/supervisor.jar"/> <!-- avoid corruption on NFS -->
		<jar
			jarfile="${build}/supervisor.jar"
			basedir="."
			manifest="ant/supervisor.mf">
                        <fileset dir="${build}">
                                <include name="**/*.class"/>
                        </fileset>
			<fileset dir="${src}" includes="keys/">
				<exclude name="**/public.key"/>
			</fileset>
			
                        <include name="votebox/middle/schema/**" />
                        <include name="build.properties"/>
		</jar>
		
		<delete file="${build}/tap.jar"/> <!-- avoid NFS handle issues -->
		<jar
		    jarfile="${build}/tap.jar"
		    basedir="."
		    manifest="ant/tap.mf">
			          <fileset dir="${build}">
			                  <include name="**/*.class"/>
			          </fileset>
					  <include name="build.properties"/>
		</jar>
		
		<delete file="${build}/challenge.jar"/>
		<jar
				    jarfile="${build}/challenge.jar"
				    basedir="."
				    manifest="ant/challenge.mf">
					          <fileset dir="${build}">
					                  <include name="**/*.class"/>
					          </fileset>
							<fileset dir="${src}" includes="keys/">
									  <include name="**/public.key"/>
							</fileset>
    		        <!-- schema files -->
	        	    <include name="votebox/middle/schema/**" />
			 		<include name="build.properties"/>
		</jar>
		
		<delete file="${build}/preptool.jar"/>
				<!-- avoid corruption on NFS -->
				<jar jarfile="${build}/preptool.jar" basedir="." manifest="ant/preptool.mf">
					<fileset dir="${build}">
						<include name="**/*.class"/>
					</fileset>
					<fileset dir="rsrc/preptool">
						<include name="images/**"/>
					</fileset>
					<!-- schema files -->
					<include name="votebox/middle/schema/**"/>
					<!-- include name="rsrc/*.ico"/ -->
					<!-- include name="rsrc/*.css"/ -->
					<include name="build.properties"/>
				</jar>
		
		<!-- We only build the following in the "evil" path, because they won't function without
		     evil code -->
		
		<delete file="${build}/actionparser.jar"/>
		<jar jarfile="${build}/actionparser.jar" basedir="." manifest="ant/actionparser.mf">
			<fileset dir="${build}">
				<include name="**/*.class"/>
			</fileset>
			<include name="build.properties"/>
		</jar>
		
		<delete file="${build}/votebox-hci.jar"/>
		<jar jarfile="${build}/votebox-hci.jar" basedir="." manifest="ant/launcher.mf">
			<fileset dir="${build}">
				<include name="**/*.class"/>
			</fileset>
			<include name="votebox/middle/schema/**"/>
			<include name="build.properties"/>
		</jar>
		
		<delete file="${build}/result-parser.jar"/>
		<jar jarfile="${build}/result-parser.jar" basedir="." manifest="ant/result-parser.mf">
			<fileset dir="${build}">
				<include name="**/*.class"/>
			</fileset>
			<include name="votebox/middle/schema/**"/>
			<include name="build.properties"/>
		</jar>
		
		<!-- Now for some OS specific packaging tasks -->
		
		<!-- Mac OS X app -->
		<jarbundler icon="rsrc/votebox.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="VoteBox-HCI" mainclass="votebox.middle.datacollection.Launcher" jar="${build}/votebox-hci.jar"/>
		<jarbundler icon="rsrc/votebox.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="VoteBox ActionParser" mainclass="actionparser.ActionParser" jar="${build}/actionparser.jar"/>
		<jarbundler icon="rsrc/votebox.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="VoteBox BallotResultParser" mainclass="actionparser.BallotResultParser" jar="${build}/result-parser.jar"/>
		<jarbundler icon="rsrc/votebox.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="VoteBox" mainclass="votebox.VoteBox" jar="${build}/votebox.jar"/>
		<jarbundler icon="rsrc/votebox.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="Supervisor" mainclass="supervisor.Supervisor" jar="${build}/supervisor.jar"/>
		<jarbundler icon="rsrc/votebox.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="Tap" mainclass="tap.Tap" jar="${build}/tap.jar"/>		
		<jarbundler icon="rsrc/votebox.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="Challenge Web Server" mainclass="tap.ChallengeWebServer" jar="${build}/challenge.jar"/>
		<jarbundler icon="rsrc/preptool-icon.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="Ballot Preparation Tool" mainclass="preptool.controller.Controller" jar="${build}/preptool.jar"/>
		
		<!-- Windows Executables -->
		<jstub icon="rsrc/icon2-32.png" archive="${build}/votebox-hci.jar" mode="win32" execute="java -jar VoteBox-HCI.exe" output="${build}/VoteBox-HCI.exe"/>
		<jstub icon="rsrc/icon2-32.png" archive="${build}/actionparser.jar" mode="win32" execute="java -jar &quot;VoteBox ActionParser.exe&quot;" output="${build}/VoteBox ActionParser.exe"/>
		<jstub icon="rsrc/icon2-32.png" archive="${build}/result-parser.jar" mode="win32" execute="java -jar &quot;VoteBox BallotResultParser.exe&quot;" output="${build}/VoteBox BallotResultParser.exe"/>
		<jstub icon="rsrc/icon2-32.png" archive="${build}/supervisor.jar" mode="win32" execute="java -jar Supervisor.exe" output="${build}/Supervisor.exe"/>
		<jstub icon="rsrc/icon2-32.png" archive="${build}/votebox.jar" mode="win32" execute="java -jar VoteBox.exe" output="${build}/VoteBox.exe"/>
		<jstub icon="rsrc/icon2-32.png" archive="${build}/tap.jar" mode="win32-console" execute="java -jar Tap.exe" output="${build}/Tap.exe"/>
		<jstub icon="rsrc/icon2-32.png" archive="${build}/challenge.jar" mode="win32-console" execute="java -jar &quot;Challenge Web Server.exe&quot;" output="${build}/Challenge Web Server.exe"/>
		<jstub icon="rsrc/preptool-icon-32.png" archive="${build}/preptool.jar" mode="win32" execute="java -jar &quot;Ballot Preparation Tool.exe&quot;" output="${build}/Ballot Preparation Tool.exe"/>
    </target>
	
	<target name="jar-good" depends="compile-good"
	                                description="build the votebox and supervisor jars">
	 
		 <delete file="${build}/votebox.jar"/> <!-- avoid corruption on NFS -->
		                <jar
		                        jarfile="${build}/votebox.jar"
		                        basedir="."
		                        manifest="ant/votebox.mf">
		                        <fileset dir="${build}">
		                                <include name="**/*.class"/>
		                        </fileset>
					<fileset dir="${src}" includes="keys/">
						<exclude name="**/private.key"/>
					</fileset>
					<fileset dir="${src}" includes="images/" />
		                        <!-- schema files -->
		                        <include name="votebox/middle/schema/**" />
		                        <!-- include name="rsrc/*.ico"/ -->
		                        <!-- include name="rsrc/*.css"/ -->
		                        <include name="build.properties"/>
		                </jar>
		                <delete file="${build}/supervisor.jar"/> <!-- avoid corruption on NFS -->
				<jar
					jarfile="${build}/supervisor.jar"
					basedir="."
					manifest="ant/supervisor.mf">
		                        <fileset dir="${build}">
		                                <include name="**/*.class"/>
		                        </fileset>
					<fileset dir="${src}" includes="keys/">
						<exclude name="**/public.key"/>
					</fileset>
					
		                        <include name="votebox/middle/schema/**" />
		                        <include name="build.properties"/>
				</jar>
				
				<delete file="${build}/tap.jar"/> <!-- avoid NFS handle issues -->
				<jar
				    jarfile="${build}/tap.jar"
				    basedir="."
				    manifest="ant/tap.mf">
					          <fileset dir="${build}">
					                  <include name="**/*.class"/>
					          </fileset>
							  <include name="build.properties"/>
				</jar>
				
				<delete file="${build}/challenge.jar"/>
				<jar
						    jarfile="${build}/challenge.jar"
						    basedir="."
						    manifest="ant/challenge.mf">
							          <fileset dir="${build}">
							                  <include name="**/*.class"/>
							          </fileset>
									<fileset dir="${src}" includes="keys/">
											  <include name="**/public.key"/>
									</fileset>
		    		        <!-- schema files -->
			        	    <include name="votebox/middle/schema/**" />
					 		<include name="build.properties"/>
				</jar>
				
				<delete file="${build}/preptool.jar"/>
						<!-- avoid corruption on NFS -->
						<jar jarfile="${build}/preptool.jar" basedir="." manifest="ant/preptool.mf">
							<fileset dir="${build}">
								<include name="**/*.class"/>
							</fileset>
							<fileset dir="rsrc/preptool">
								<include name="images/**"/>
							</fileset>
							<!-- schema files -->
							<include name="votebox/middle/schema/**"/>
							<!-- include name="rsrc/*.ico"/ -->
							<!-- include name="rsrc/*.css"/ -->
							<include name="build.properties"/>
						</jar>
				
				<!-- Now for some OS specific packaging tasks -->
				
				<!-- Mac OS X app -->
				<jarbundler icon="rsrc/votebox.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="VoteBox" mainclass="votebox.VoteBox" jar="${build}/votebox.jar"/>
				<jarbundler icon="rsrc/votebox.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="Supervisor" mainclass="supervisor.Supervisor" jar="${build}/supervisor.jar"/>
				<jarbundler icon="rsrc/votebox.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="Tap" mainclass="tap.Tap" jar="${build}/tap.jar"/>		
				<jarbundler icon="rsrc/votebox.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="Challenge Web Server" mainclass="tap.ChallengeWebServer" jar="${build}/challenge.jar"/>
				<jarbundler icon="rsrc/preptool-icon.icns" stubfile="ant/JavaApplicationStub" dir="${build}" name="Ballot Preparation Tool" mainclass="preptool.controller.Controller" jar="${build}/preptool.jar"/>
				
				<!-- Windows Executables -->
				<jstub icon="rsrc/icon2-32.png" archive="${build}/supervisor.jar" mode="win32" execute="java -jar Supervisor.exe" output="${build}/Supervisor.exe"/>
				<jstub icon="rsrc/icon2-32.png" archive="${build}/votebox.jar" mode="win32" execute="java -jar VoteBox.exe" output="${build}/VoteBox.exe"/>
				<jstub icon="rsrc/icon2-32.png" archive="${build}/tap.jar" mode="win32-console" execute="java -jar Tap.exe" output="${build}/Tap.exe"/>
				<jstub icon="rsrc/icon2-32.png" archive="${build}/challenge.jar" mode="win32-console" execute="java -jar &quot;Challenge Web Server.exe&quot;" output="${build}/Challenge Web Server.exe"/>
				<jstub icon="rsrc/preptool-icon-32.png" archive="${build}/preptool.jar" mode="win32" execute="java -jar &quot;Ballot Preparation Tool.exe&quot;" output="${build}/Ballot Preparation Tool.exe"/>
	</target>
	
	<target name="docs" depends="clean" description="build the doxygen docs">
		<doxygen versionCompatible="1.5.6+" configFilename="${ant}/Doxyfile.cfg"/>
	</target>

	<target name="publish" depends="clean" description="attach license header to all docs">
		<license license="${src}/Header.txt" dir="${publish}">
			<fileset dir="${src}">
				<include name="**/*.java"/>
				<include name="**/*.c"/>
				<include name="**/*.h"/>
			</fileset>
		</license>
	</target>
	
	<target name="release-good" description="build our three platform specific zip files for distribution">
			<!-- Force a completely clean build -->
			<antcall target="clean"/>
			
			<!-- Get rid of any old release we have sitting around -->
			<delete dir="${release}"/>
			<mkdir dir="${release}"/>
			
			<!-- build and copy the doxygen docs -->
			<antcall target="docs"/>
			<mkdir dir="${release}/docs"/>
			<mkdir dir="${release}/docs/doxygen"/>
			<copy todir="${release}/docs/doxygen">
				<fileset dir="doxygen">
					<include name="**/*"/>
				</fileset>
			</copy>
			
			<!-- build the jar files and copy them over to release -->
			<antcall target="jar-good"/>
			<mkdir dir="${release}/win"/>
			<mkdir dir="${release}/mac"/>
			<mkdir dir="${release}/java"/>
			<copy todir="${release}/win">
				<fileset dir="${build}">
					<include name="*.exe"/>
				</fileset>
			</copy>
			<copy todir="${release}/mac">
				<fileset dir="${build}">
					<include name="*.app"/>
				</fileset>
			</copy>
			<copy todir="${release}/java">
				<fileset dir="${build}">
					<include name="*.jar"/>
				</fileset>
			</copy>
			
			<!-- build the windows zip file -->
			<zip destfile="${release}/VoteBox Complete-Good (Windows).zip" update="true">
				<zipfileset dir="${release}/win" prefix="bin"/>
				<zipfileset dir="${release}/java" prefix="bin/java"/>
				<zipfileset dir="${release}/docs" prefix="docs"/>
				<zipfileset dir="${src}" includes="LICENSE.txt" fullpath="LICENSE.txt"/>
				<zipfileset dir="${src}/docs" prefix="docs"/>
			</zip>
			
			<!-- build the mac zip file -->
			<zip destfile="${release}/VoteBox Complete-Good (Mac OS X).zip" update="true">
				<zipfileset dir="${release}/mac" prefix="bin"/>
				<zipfileset dir="${release}/java" prefix="bin/java"/>
				<zipfileset dir="${release}/docs" prefix="docs"/>
				<zipfileset dir="${src}" includes="LICENSE.txt" fullpath="LICENSE.txt"/>
				<zipfileset dir="${src}/docs" prefix="docs"/>
			</zip>
			
			<!-- build the pure java zip file -->
			<zip destfile="${release}/VoteBox Complete-Good (Java).zip" update="true">
				<zipfileset dir="${release}/java" prefix="bin"/>
				<zipfileset dir="${release}/docs" prefix="docs"/>
				<zipfileset dir="${src}" includes="LICENSE.txt" fullpath="LICENSE.txt"/>
				<zipfileset dir="${src}/docs" prefix="docs"/>
			</zip>
		</target>
	
	<target name="release-evil" description="build our three platform specific zip files for distribution">
		<!-- Force a completely clean build -->
		<antcall target="clean"/>
		
		<!-- Get rid of any old release we have sitting around -->
		<delete dir="${release}"/>
		<mkdir dir="${release}"/>
		
		<!-- build and copy the doxygen docs -->
		<antcall target="docs"/>
		<mkdir dir="${release}/docs"/>
		<mkdir dir="${release}/docs/doxygen"/>
		<copy todir="${release}/docs/doxygen">
			<fileset dir="doxygen">
				<include name="**/*"/>
			</fileset>
		</copy>
		
		<!-- build the jar files and copy them over to release -->
		<antcall target="jar-evil"/>
		<mkdir dir="${release}/win"/>
		<mkdir dir="${release}/mac"/>
		<mkdir dir="${release}/java"/>
		<copy todir="${release}/win">
			<fileset dir="${build}">
				<include name="*.exe"/>
			</fileset>
		</copy>
		<copy todir="${release}/mac">
			<fileset dir="${build}">
				<include name="*.app"/>
			</fileset>
		</copy>
		<copy todir="${release}/java">
			<fileset dir="${build}">
				<include name="*.jar"/>
			</fileset>
		</copy>
		
		<!-- build the windows zip file -->
		<zip destfile="${release}/VoteBox Complete-Evil (Windows).zip" update="true">
			<zipfileset dir="${release}/win" prefix="bin"/>
			<zipfileset dir="${release}/java" prefix="bin/java"/>
			<zipfileset dir="${release}/docs" prefix="docs"/>
			<zipfileset dir="${src}" includes="LICENSE.txt" fullpath="LICENSE.txt"/>
			<zipfileset dir="${src}/docs" prefix="docs"/>
		</zip>
		
		<!-- build the mac zip file -->
		<zip destfile="${release}/VoteBox Complete-Evil (Mac OS X).zip" update="true">
			<zipfileset dir="${release}/mac" prefix="bin"/>
			<zipfileset dir="${release}/java" prefix="bin/java"/>
			<zipfileset dir="${release}/docs" prefix="docs"/>
			<zipfileset dir="${src}" includes="LICENSE.txt" fullpath="LICENSE.txt"/>
			<zipfileset dir="${src}/docs" prefix="docs"/>
		</zip>
		
		<!-- build the pure java zip file -->
		<zip destfile="${release}/VoteBox Complete-Evil (Java).zip" update="true">
			<zipfileset dir="${release}/java" prefix="bin"/>
			<zipfileset dir="${release}/docs" prefix="docs"/>
			<zipfileset dir="${src}" includes="LICENSE.txt" fullpath="LICENSE.txt"/>
			<zipfileset dir="${src}/docs" prefix="docs"/>
		</zip>
	</target>
</project>
